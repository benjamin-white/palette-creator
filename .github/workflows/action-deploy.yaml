name: Deploy

on:
  workflow_dispatch:
  push:
    tags: ["v[0-9]+.[0-9]+.[0-9]*"]
    branches:
      - "release/**"

# variables:
#   imageName: palette-creator
#   imageTag: ${{ github.sha }}

env:
  IMAGE_NAME: palette-creator
  IMAGE_TAG: ${{ github.sha }}
  # IMAGE_REGISTRY_URL: registry.domain.com
  # PROJECT_ID: YOUR_PROJECT_ID # TODO: update Google Cloud project id
  # PROJECT_ID: vars.project_id
  # GAR_LOCATION: YOUR_GAR_LOCATION # TODO: update Artifact Registry location
  # REPOSITORY: YOUR_REPOSITORY_NAME # TODO: update Artifact Registry repository name
  # SERVICE: YOUR_SERVICE_NAME # TODO: update Cloud Run service name
  # REGION: YOUR_SERVICE_REGION # TODO: update Cloud Run service region
  IMAGE_NAME: |-
    "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"

jobs:
  deploy:
    permissions:
      contents: "read"
      id-token: "write"

    runs-on: ubuntu-latest

    steps:
      - name: Auth - GCP
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ vars.WIF_PROVIDER }}'
          service_account: '${{ WIF_SERVICE_ACCOUNT }}'
          # service_account: '${{ vars.WIF_SERVICE_ACCOUNT }}'
          # credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
          # token_format: 'access_token'

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          # username: _json_key
          # password: ${{ secrets.GCP_CREDENTIALS }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Build and Push
        run: |-
          docker build -t ${{ env.IMAGE_NAME }} .
          docker push ${{ env.IMAGE_NAME }}

      - name: Deploy - GCR
          id: deploy
          uses: google-github-actions/deploy-cloudrun@v0
          with:
            service: ${{ env.SERVICE }}
            region: ${{ env.REGION }}
            image: ${{ env.IMAGE_NAME }}

      - name: Print deploy URL
        run: echo ${{ steps.deploy.outputs.url }}

      # - name: Teardown
      #   run: docker rmi $IMAGE_REGISTRY_URL/$IMAGE_NAME:$IMAGE_TAG
      # - name: Prune Docker
      #   run: docker system prune -a -f
